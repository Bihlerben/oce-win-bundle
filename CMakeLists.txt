CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(oce-bundle)

# Define helper macro OPTION_WITH_DEFAULT
MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )
	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

# Options
OPTION_WITH_DEFAULT(OCEBUNDLE_SHARED_LIBS "Builds shared libraries" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_BUILD_FREETYPE "Builds the freetype library" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_BUILD_FREEIMAGE "Builds FreeImage library" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_BUILD_GL2PS "Builds gl2ps library" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_BUILD_TBB "Builds TBB library" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_ADD_OCE "Adds the OCE project from the OCE subdir (disable when using in a different tree)" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_AUTO_INSTALL "Install the bundle libraries along the OCE install" ON)
OPTION_WITH_DEFAULT(OCEBUNDLE_AUTO_INSTALL_OTHER "Install all the other external libraries along with OCE" ON)

# Compiler settings and flags
SET(CMAKE_DEBUG_POSTFIX "d")

IF(OCEBUNDLE_SHARED_LIBS)
	SET(OCEBUNDLE_ADD_LIB_PREFIX "SHARED")
ELSE()

  IF(OCEBUNDLE_BUILD_FREEIMAGE)
    # This setting is required being propagated to the OCE project too.
    ADD_DEFINITIONS("-DFREEIMAGE_LIB")
  ENDIF()
ENDIF()

IF (${CMAKE_SIZEOF_VOID_P} MATCHES "8") # It is 64bit, otherwise 32 bit systems match 4
	ADD_DEFINITIONS(-D_OCC64)
	SET(BIT 64)
ELSE (${CMAKE_SIZEOF_VOID_P} MATCHES "8")
  SET(BIT 32)
ENDIF(${CMAKE_SIZEOF_VOID_P} MATCHES "8")

SET(OCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/oce/)
SET(FT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/freetype)
SET(GL2PS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/gl2ps)
SET(FREEIMAGE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/FreeImage)
SET(LIBPNG_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/FreeImage/Source/LibPNG/)
SET(ZLIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/FreeImage/Source/zlib/)
SET(TBB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/TBB/)

# Sets the binary output path (this is valid only for bundled libraries)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin)
SET(ARCHIVE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin)

# Set the libraries paths to the built ones. This must be done before OCE is added

IF(OCEBUNDLE_BUILD_FREETYPE)
  SET(FREETYPE_INCLUDE_DIR_freetype2 ${CMAKE_CURRENT_SOURCE_DIR}/libs/freetype CACHE PATH "" FORCE)
  SET(FREETYPE_INCLUDE_DIR_ft2build ${CMAKE_CURRENT_SOURCE_DIR}/libs/freetype/include CACHE PATH "" FORCE)
  SET(FREETYPE_INCLUDE_DIRS "${FREETYPE_INCLUDE_DIR_freetype2}" "${FREETYPE_INCLUDE_DIR_ft2build}")
  SET(FREETYPE_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/freetype.lib CACHE FILEPATH "" FORCE)
  SET(FREETYPE_LIBRARIES ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/freetype.lib CACHE FILEPATH "" FORCE)
  SET(FREETYPE_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/freetyped.lib CACHE FILEPATH "" FORCE)
ENDIF()

IF(OCEBUNDLE_BUILD_GL2PS)
  SET(GL2PS_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/gl2ps.lib CACHE FILEPATH "" FORCE)
  SET(GL2PS_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/gl2psd.lib CACHE FILEPATH "" FORCE)
  SET(GL2PS_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}//libs/gl2ps CACHE PATH "" FORCE)
ENDIF()

IF(OCEBUNDLE_BUILD_FREEIMAGE)
  SET(FREEIMAGE_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/FreeImage.lib CACHE FILEPATH "" FORCE)
  SET(FREEIMAGE_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/FreeImaged.lib CACHE FILEPATH "" FORCE)

  SET(FREEIMAGEPLUS_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/FreeImagePlus.lib CACHE FILEPATH "" FORCE)
  SET(FREEIMAGEPLUS_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/FreeImagePlusd.lib CACHE FILEPATH "" FORCE)
  SET(FREEIMAGE_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/FreeImage/Source ${CMAKE_CURRENT_SOURCE_DIR}/libs/FreeImage/Wrapper/FreeImagePlus CACHE PATH "" FORCE)
ENDIF()

IF(OCEBUNDLE_BUILD_TBB)
	SET(TBB_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/TBB/include CACHE PATH "" FORCE)
	SET(TBB_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/tbb.lib CACHE FILEPATH "" FORCE)
    SET(TBB_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/tbb_debug.lib CACHE FILEPATH "" FORCE)
	SET(TBB_MALLOC_LIBRARY ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/tbbmalloc.lib CACHE FILEPATH "" FORCE)
    SET(TBB_MALLOC_LIBRARY_DEBUG ${ARCHIVE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/tbbmalloc_debug.lib CACHE FILEPATH "" FORCE)
ENDIF()

# Adds OCE to the tree
IF(OCEBUNDLE_ADD_OCE)
	ADD_SUBDIRECTORY(${OCE_DIR})
ENDIF()

# Installation
SET( OCEBUNDLE_INSTALL_DIR "${OCE_INSTALL_PREFIX}")

IF(WIN32)
	SET( OCEBUNDLE_INSTALL_DIR_BITS "${OCE_INSTALL_PREFIX}/Win${BIT}")
ELSE()
	SET( OCEBUNDLE_INSTALL_DIR_BITS "${OCE_INSTALL_PREFIX}")
ENDIF()

IF(OCEBUNDLE_BUILD_FREETYPE)
  ADD_SUBDIRECTORY(freetype.cmake)
ENDIF()

IF(OCEBUNDLE_BUILD_GL2PS)
  ADD_SUBDIRECTORY(gl2ps.cmake)
ENDIF()

IF(OCEBUNDLE_BUILD_FREEIMAGE)
  ADD_SUBDIRECTORY(FreeImage.cmake)
ENDIF()

IF(OCEBUNDLE_BUILD_TBB)
  ADD_SUBDIRECTORY(tbb.cmake)
  ADD_SUBDIRECTORY(tbbmalloc.cmake)
ENDIF()

# Add dependencies between OCE and oce-win-bundle

IF(TARGET TKernel)
	IF(OCEBUNDLE_BUILD_TBB)
		ADD_DEPENDENCIES( TKernel tbb tbbmalloc)
	ENDIF()
ENDIF()

IF(TARGET TKService)
  IF(OCEBUNDLE_BUILD_FREETYPE)
    ADD_DEPENDENCIES( TKService freetype )
  ENDIF()
  IF(OCEBUNDLE_BUILD_FREEIMAGE)
    ADD_DEPENDENCIES( TKService FreeImage )
  ENDIF()
ENDIF()

IF(TARGET TKOpenGL)
  IF(OCEBUNDLE_BUILD_GL2PS)
    ADD_DEPENDENCIES( TKOpenGl gl2ps )
  ENDIF()
ENDIF()

# Install additional libraries

# Install TCL
IF (OCEBUNDLE_AUTO_INSTALL_OTHER)
	IF(DEFINED TCL_LIBRARY)
		GET_FILENAME_COMPONENT(TCL_BIN_DIR ${TCL_TCLSH} PATH)
		GET_FILENAME_COMPONENT(TCL_LIB_NAME_DIR ${TCL_LIBRARY} NAME_WE)
		MESSAGE("Auto Installing TCL from ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll")
		INSTALL(FILES ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll DESTINATION ${OCEBUNDLE_INSTALL_DIR_BITS}/bin CONFIGURATIONS Debug )
		INSTALL(FILES ${TCL_BIN_DIR}/${TCL_LIB_NAME_DIR}.dll DESTINATION ${OCEBUNDLE_INSTALL_DIR_BITS}/bin CONFIGURATIONS Release RelWithDebInfo MinSizeRel )
	ENDIF()
ENDIF()	